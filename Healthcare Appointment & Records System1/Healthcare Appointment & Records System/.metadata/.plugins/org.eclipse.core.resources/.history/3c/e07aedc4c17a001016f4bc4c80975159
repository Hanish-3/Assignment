package com.example.appointment_service.service;

import com.example.appointment_service.dto.AppointmentEvent;
import com.example.appointment_service.dto.DoctorAvailabilityDTO;
import com.example.appointment_service.feign.DoctorClient;
import com.example.appointment_service.model.Appointment;
import com.example.appointment_service.repository.AppointmentRepository;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class AppointmentService {
    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private DoctorClient doctorClient;

    @Autowired
    private KafkaTemplate<Long, AppointmentEvent> kafkaTemplate;

    @Transactional
    @CircuitBreaker(name = "doctorService", fallbackMethod = "bookAppointmentFallback")
    public Appointment bookAppointment(Long patientId, Long doctorId, LocalDateTime appointmentTime) {
        // 1. Check doctor availability
        DoctorAvailabilityDTO doctor = doctorClient.getDoctorById(doctorId);
        if (doctor == null) {
            throw new RuntimeException("Doctor not found.");
        }

        // Additional logic...
    }

    // Other methods...
}
